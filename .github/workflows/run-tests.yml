name: "Run Django unit tests"

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  run_tests:
    name: Run Django Tests
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgis://postgres:postgres@localhost:5432/postgres
    services:
      postgres:
        image: postgis/postgis:13-3.1-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --mount type=tmpfs,destination=/var/lib/postgresql/data --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      #----------------------------------------------
      # Checkout repo and set up Python
      #----------------------------------------------
      - name: Checkout repo
        uses: actions/checkout@v4
        id: checkout-repo
      - name: Set up Python
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: '3.10'
      #----------------------------------------------
      # Install GDAL into the environment
      #----------------------------------------------
      - name: Install GDAL
        id: install-gdal
        run: |
          sudo apt-add-repository --yes ppa:ubuntugis/ubuntugis-unstable
          sudo apt-get update
          sudo apt-get install --no-install-recommends --yes gdal-bin libgdal-dev
      #----------------------------------------------
      # Install & configure Poetry
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.6.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      # Load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # Install project dependencies if cache does not exist
      #----------------------------------------------
      - name: Install project dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # Run unit tests
      #----------------------------------------------
      - name: Create DB extensions
        run: |
          psql postgresql://postgres:postgres@localhost:5432/template1 -c 'CREATE EXTENSION citext'
      - name: Run tests
        run: |
          source .venv/bin/activate
          python manage.py collectstatic
          python manage.py test
